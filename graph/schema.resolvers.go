package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"
	"strconv"

	"github.com/xcheng85/simple-graphql-go/graph/model"
)

// AddPlayer is the resolver for the addPlayer field.
func (r *mutationResolver) AddPlayer(ctx context.Context, player model.PlayerInput) (*model.Player, error) {
	numPlayers := len(r.playersMap)
	//playerId := fmt.Sprintf("%d", numPlayers);
	playerId := strconv.Itoa(numPlayers)
	p := &model.Player{
		ID:      playerId,
		First:   player.First,
		Last:    player.Last,
		Country: player.Country,
		Gender:  player.Gender,
	}
	r.playersMap[playerId] = p
	return p, nil
}

// GetAllPlayers is the resolver for the GetAllPlayers field.
func (r *queryResolver) GetAllPlayers(ctx context.Context) ([]*model.Player, error) {
	players := make([]*model.Player, len(r.playersMap))
	idx := 0
	for _, p := range r.playersMap {
		players[idx] = p
	}
	return players, nil
}

// GetAllPlayersByGender is the resolver for the GetAllPlayersByGender field.
func (r *queryResolver) GetAllPlayersByGender(ctx context.Context, gender model.GenderType) ([]*model.Player, error) {
	panic(fmt.Errorf("not implemented: GetAllPlayersByGender - GetAllPlayersByGender"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) CreatePlayer(ctx context.Context, player model.PlayerInput) (*model.Player, error) {
	numPlayers := len(r.playersMap)
	//playerId := fmt.Sprintf("%d", numPlayers);
	playerId := strconv.Itoa(numPlayers)
	p := &model.Player{
		ID:      playerId,
		First:   player.First,
		Last:    player.Last,
		Country: player.Country,
		Gender:  player.Gender,
	}
	r.playersMap[playerId] = p
	return p, nil
}
func NewResolver() Config {
	r := Resolver{}
	r.playersMap = make(map[string]*model.Player)
	return Config{
		Resolvers: &r,
	}
}
